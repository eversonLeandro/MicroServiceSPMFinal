version: '3.8'

services:
  # Base de datos PostgreSQL (con múltiples bases de datos)
  postgres-db:
    image: postgres:latest
    environment:
      POSTGRES_PASSWORD: "123"
      POSTGRES_DB: "student_db"  # Base de datos principal (se crea por defecto)
      POSTGRES_MULTIPLE_DATABASES: "postulation_db,company_db,project_db,login_db,keycloak_db"  # Bases de datos adicionales
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh  # Script para crear las DBs
    networks:
      - microservices-network

  # RabbitMQ y Keycloak (sin cambios)
  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - microservices-network

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    command: start-dev --import-realm
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
      KC_DB: "postgres"
      KC_DB_URL: "jdbc:postgresql://postgres-db:5432/keycloak_db"
      KC_DB_USERNAME: "postgres"
      KC_DB_PASSWORD: "123"
      KC_HOSTNAME: "keycloak"
      KC_HOSTNAME_PORT: "8080"
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HOSTNAME_STRICT_BACKCHANNEL: "false"
    volumes:
      - ./keycloak-setup/realm-export.json:/opt/keycloak/data/import/realm-export.json
    ports:
      - "8080:8080"
    depends_on:
      - postgres-db
    healthcheck:
      # Health check universal que funciona en ambos sistemas
      # Usa Java (que siempre está disponible en Keycloak) para hacer la petición HTTP
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/localhost/8080 && echo -e 'GET /realms/MicroserviceSPM HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3 && timeout 5 cat <&3 | head -1 | grep -q '200\\|302' || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 90s
    networks:
      - microservices-network
      
    
    
  # Microservicios (ajustados para usar sus propias bases de datos)
  api-gateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    image: apigateway-service:1.0
    ports:
      - "8081:8081"
    environment:
      SPRING_CLOUD_GATEWAY_ROUTES_0_URI: "http://project-service:8086"
      SPRING_CLOUD_GATEWAY_ROUTES_1_URI: "http://postulation-service:8082"
      SPRING_CLOUD_GATEWAY_ROUTES_2_URI: "http://company-service:8088"
      SPRING_CLOUD_GATEWAY_ROUTES_3_URI: "http://student-service:8083"
      SPRING_CLOUD_GATEWAY_ROUTES_4_URI: "http://login-service:8085"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: "http://keycloak:8080/realms/MicroserviceSPM"
    depends_on:
      - student-service
      - postulation-service
      - company-service
      - login-service
      - keycloak
    networks:
      - microservices-network

  adminer:
    image: adminer
    container_name: adminer
    ports:
      - "8090:8080"
    networks:
      - microservices-network
    depends_on:
      - postgres-db
    restart: unless-stopped


  student-service:
    build:
      context: ./MicroServiceStudent
      dockerfile: Dockerfile
    image: student-service:1.0
    ports:
      - "8083:8083"
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres-db:5432/student_db"  # Su propia DB
      SPRING_DATASOURCE_USERNAME: "postgres"
      SPRING_DATASOURCE_PASSWORD: "123"
      SPRING_RABBITMQ_HOST: "rabbitmq"
    depends_on:
      - postgres-db
      - rabbitmq
      - keycloak
    networks:
      - microservices-network

  postulation-service:
    build:
      context: ./MicroServicePostulation
      dockerfile: Dockerfile
    image: postulation-service:1.0
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres-db:5432/postulation_db"  # Su propia DB
      SPRING_DATASOURCE_USERNAME: "postgres"
      SPRING_DATASOURCE_PASSWORD: "123"
      SPRING_RABBITMQ_HOST: "rabbitmq"
    depends_on:
      - postgres-db
      - rabbitmq
      - keycloak
    networks:
      - microservices-network

  company-service:
    build:
      context: ./MicroServiceCompany
      dockerfile: Dockerfile
    image: company-service:1.0
    ports:
      - "8088:8088"
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres-db:5432/company_db"  # Su propia DB
      SPRING_DATASOURCE_USERNAME: "postgres"
      SPRING_DATASOURCE_PASSWORD: "123"
      SPRING_RABBITMQ_HOST: "rabbitmq"
    depends_on:
      - postgres-db
      - rabbitmq
    networks:
      - microservices-network

  project-service:
    build:
      context: ./MicroServiceProjectHex
      dockerfile: Dockerfile
    image: project-service:1.0
    ports:
      - "8086:8086"
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres-db:5432/project_db"  # Su propia DB
      SPRING_DATASOURCE_USERNAME: "postgres"
      SPRING_DATASOURCE_PASSWORD: "123"
      SPRING_RABBITMQ_HOST: "rabbitmq"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: "http://keycloak:8080/realms/MicroserviceSPM"
    depends_on:
      - postgres-db
      - rabbitmq
      - keycloak
    networks:
      - microservices-network

  email-notification:
    build:
      context: ./MicroServiceEmailNotification
      dockerfile: Dockerfile
    image: emailnotification-service:1.0
    ports:
      - "8089:8089"
    environment:
      SPRING_RABBITMQ_HOST: "rabbitmq"
      SPRING_MAIL_HOST: "smtp.gmail.com"
      SPRING_MAIL_PORT: "587"
      SPRING_MAIL_USERNAME: "yisus0816z@gmail.com"
      SPRING_MAIL_PASSWORD: "yfguvgiqjxjtyuak"
    depends_on:
      - rabbitmq
    networks:
      - microservices-network
  

  login-service:
    build:
      context: ./MicroServiceLogin
      dockerfile: Dockerfile
    image: login-service:1.0
    ports:
      - "8085:8085"
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres-db:5432/login_db"  # Base de datos específica
      SPRING_DATASOURCE_USERNAME: "postgres"
      SPRING_DATASOURCE_PASSWORD: "123"
      SPRING_RABBITMQ_HOST: "rabbitmq"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: "http://keycloak:8080/realms/MicroserviceSPM"
    depends_on:
      postgres-db:
        condition: service_started
      rabbitmq:
        condition: service_started
      keycloak:
        condition: service_healthy
      postulation-service:
        condition: service_started
      company-service:
        condition: service_started
      project-service:
        condition: service_started
    networks:
      - microservices-network
    restart: on-failure


networks:
  microservices-network:
    driver: bridge

volumes:
  postgres-data:
  keycloak-data: